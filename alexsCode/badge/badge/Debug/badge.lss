
badge.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000003d6  0000046a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800066  00800066  00000470  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000470  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000004a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000086d  00000000  00000000  00000574  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005bf  00000000  00000000  00000de1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000618  00000000  00000000  000013a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000144  00000000  00000000  000019b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d2  00000000  00000000  00001afc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001e5  00000000  00000000  00001ece  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  000020b3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	35 c0       	rjmp	.+106    	; 0x6c <__ctors_end>
   2:	95 c1       	rjmp	.+810    	; 0x32e <__vector_1>
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	4b c0       	rjmp	.+150    	; 0x9e <__bad_interrupt>
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	49 c0       	rjmp	.+146    	; 0x9e <__bad_interrupt>
   c:	c3 c0       	rjmp	.+390    	; 0x194 <__vector_6>
   e:	47 c0       	rjmp	.+142    	; 0x9e <__bad_interrupt>
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	45 c0       	rjmp	.+138    	; 0x9e <__bad_interrupt>
  14:	7b c0       	rjmp	.+246    	; 0x10c <animation_select+0x30>
  16:	87 c0       	rjmp	.+270    	; 0x126 <animation_select+0x4a>
  18:	93 c0       	rjmp	.+294    	; 0x140 <animation_select+0x64>
  1a:	9f c0       	rjmp	.+318    	; 0x15a <animation_select+0x7e>
  1c:	74 c0       	rjmp	.+232    	; 0x106 <animation_select+0x2a>
  1e:	80 c0       	rjmp	.+256    	; 0x120 <animation_select+0x44>
  20:	8c c0       	rjmp	.+280    	; 0x13a <animation_select+0x5e>
  22:	98 c0       	rjmp	.+304    	; 0x154 <animation_select+0x78>

00000024 <__trampolines_end>:
  24:	aa 0a       	sbc	r10, r26
  26:	55 05       	cpc	r21, r5

00000028 <alexsTest>:
  28:	01 00 02 00 04 00 08 00 10 00 20 00 40 00 80 00     .......... .@...
  38:	00 01 00 02 00 04 00 08                             ........

00000040 <updown>:
  40:	20 00 50 00 88 00 04 01 02 02 01 04 00 08            .P...........

0000004e <three_apart>:
  4e:	24 09 92 04 49 02                                   $...I.

00000054 <portMasks>:
  54:	05 01 05 04 0c 04 0c 08 18 08 18 10 09 01 09 08     ................
  64:	14 04 14 10 11 01 11 10                             ........

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf e9       	ldi	r28, 0x9F	; 159
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	10 e0       	ldi	r17, 0x00	; 0
  76:	a0 e6       	ldi	r26, 0x60	; 96
  78:	b0 e0       	ldi	r27, 0x00	; 0
  7a:	e6 ed       	ldi	r30, 0xD6	; 214
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 36       	cpi	r26, 0x66	; 102
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	20 e0       	ldi	r18, 0x00	; 0
  8c:	a6 e6       	ldi	r26, 0x66	; 102
  8e:	b0 e0       	ldi	r27, 0x00	; 0
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 37       	cpi	r26, 0x72	; 114
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	7c d1       	rcall	.+760    	; 0x394 <main>
  9c:	9a c1       	rjmp	.+820    	; 0x3d2 <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <animation_init>:
volatile uint8_t sleep_flag=1;

void animation_init(void)
{
	//init Timer
	TCCR0A = (1<<WGM01);
  a0:	82 e0       	ldi	r24, 0x02	; 2
  a2:	8f bd       	out	0x2f, r24	; 47
	TCCR0B = (1<<CS02)|(1<<CS00);
  a4:	85 e0       	ldi	r24, 0x05	; 5
  a6:	83 bf       	out	0x33, r24	; 51
	TIMSK0 = (1<<OCIE0A);
  a8:	84 e0       	ldi	r24, 0x04	; 4
  aa:	89 bf       	out	0x39, r24	; 57
	OCR0A = 1;
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	86 bf       	out	0x36, r24	; 54
	
	charlieBuffer=0xFFFF;//alexsTest[0];
  b0:	2f ef       	ldi	r18, 0xFF	; 255
  b2:	3f ef       	ldi	r19, 0xFF	; 255
  b4:	30 93 6c 00 	sts	0x006C, r19	; 0x80006c <charlieBuffer+0x1>
  b8:	20 93 6b 00 	sts	0x006B, r18	; 0x80006b <charlieBuffer>
	charlieCOunt=0;
  bc:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <charlieCOunt>
	animationCounter=0;
  c0:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <animationCounter>
	animationCOunterMAX=alexsTestAnimation_length-1;
  c4:	9b e0       	ldi	r25, 0x0B	; 11
  c6:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <animationCOunterMAX>
	animationData=&alexsTest[0];
  ca:	28 e2       	ldi	r18, 0x28	; 40
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <animationData+0x1>
  d2:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <animationData>
	leds_enabled=1;
  d6:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <leds_enabled>
  da:	08 95       	ret

000000dc <animation_select>:
	
}

void animation_select(uint8_t animationNum)
{
  dc:	cf 93       	push	r28
  de:	c8 2f       	mov	r28, r24
	leds_enabled=0; 
  e0:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <leds_enabled>
	leds_off();
  e4:	04 d1       	rcall	.+520    	; 0x2ee <leds_off>
	animationCounter=0;
  e6:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <animationCounter>
	charlieCOunt=0;
  ea:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <charlieCOunt>
	subDivMAX=subDivMAX_NORMAL;
  ee:	82 e3       	ldi	r24, 0x32	; 50
  f0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <subDivMAX>
	
	switch(animationNum)
  f4:	8c 2f       	mov	r24, r28
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	88 30       	cpi	r24, 0x08	; 8
  fa:	91 05       	cpc	r25, r1
  fc:	b8 f5       	brcc	.+110    	; 0x16c <animation_select+0x90>
  fe:	fc 01       	movw	r30, r24
 100:	e6 5f       	subi	r30, 0xF6	; 246
 102:	ff 4f       	sbci	r31, 0xFF	; 255
 104:	09 94       	ijmp
	{
		case 4: subDivMAX=subDivMAX_FAST;
 106:	89 e1       	ldi	r24, 0x19	; 25
 108:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <subDivMAX>
		case 0:	animationCOunterMAX=alexsTestAnimation_length;
 10c:	8c e0       	ldi	r24, 0x0C	; 12
 10e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <animationCOunterMAX>
				animationData=&alexsTest[0];
 112:	88 e2       	ldi	r24, 0x28	; 40
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <animationData+0x1>
 11a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <animationData>
				break;
 11e:	26 c0       	rjmp	.+76     	; 0x16c <animation_select+0x90>
		case 5: subDivMAX=subDivMAX_FAST;
 120:	89 e1       	ldi	r24, 0x19	; 25
 122:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <subDivMAX>
		case 1: animationCOunterMAX=updown_length;
 126:	87 e0       	ldi	r24, 0x07	; 7
 128:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <animationCOunterMAX>
				animationData=&updown[0];
 12c:	80 e4       	ldi	r24, 0x40	; 64
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <animationData+0x1>
 134:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <animationData>
				break;
 138:	19 c0       	rjmp	.+50     	; 0x16c <animation_select+0x90>
		case 6: subDivMAX=subDivMAX_FAST;
 13a:	89 e1       	ldi	r24, 0x19	; 25
 13c:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <subDivMAX>
		case 2:	animationCOunterMAX=three_apart_length;
 140:	83 e0       	ldi	r24, 0x03	; 3
 142:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <animationCOunterMAX>
				animationData=&three_apart[0];
 146:	8e e4       	ldi	r24, 0x4E	; 78
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <animationData+0x1>
 14e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <animationData>
				break;
 152:	0c c0       	rjmp	.+24     	; 0x16c <animation_select+0x90>
		case 7: subDivMAX=subDivMAX_FAST;
 154:	89 e1       	ldi	r24, 0x19	; 25
 156:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <subDivMAX>
		case 3: animationCOunterMAX=two_apart_length;
 15a:	82 e0       	ldi	r24, 0x02	; 2
 15c:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <animationCOunterMAX>
				animationData=&two_apart[0];
 160:	84 e2       	ldi	r24, 0x24	; 36
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <animationData+0x1>
 168:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <animationData>
				break;	
	}
	
	charlieBuffer=animationData[0];
 16c:	e0 91 70 00 	lds	r30, 0x0070	; 0x800070 <animationData>
 170:	f0 91 71 00 	lds	r31, 0x0071	; 0x800071 <animationData+0x1>
 174:	85 91       	lpm	r24, Z+
 176:	95 91       	lpm	r25, Z+
 178:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <charlieBuffer+0x1>
 17c:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <charlieBuffer>
	leds_enabled=1;
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <leds_enabled>
	
}
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <isButFlag>:

uint8_t isButFlag (void)
{
	uint8_t temp = butEventFlag;
 18a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
	butEventFlag = 0;
 18e:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__data_end>
	return temp;
}
 192:	08 95       	ret

00000194 <__vector_6>:

ISR(TIM0_COMPA_vect)
{
 194:	1f 92       	push	r1
 196:	0f 92       	push	r0
 198:	0f b6       	in	r0, 0x3f	; 63
 19a:	0f 92       	push	r0
 19c:	11 24       	eor	r1, r1
 19e:	2f 93       	push	r18
 1a0:	3f 93       	push	r19
 1a2:	4f 93       	push	r20
 1a4:	5f 93       	push	r21
 1a6:	6f 93       	push	r22
 1a8:	7f 93       	push	r23
 1aa:	8f 93       	push	r24
 1ac:	9f 93       	push	r25
 1ae:	af 93       	push	r26
 1b0:	bf 93       	push	r27
 1b2:	ef 93       	push	r30
 1b4:	ff 93       	push	r31
	if (leds_enabled)
 1b6:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <leds_enabled>
 1ba:	88 23       	and	r24, r24
 1bc:	09 f4       	brne	.+2      	; 0x1c0 <__vector_6+0x2c>
 1be:	4d c0       	rjmp	.+154    	; 0x25a <__vector_6+0xc6>
	{
		if (charlieBuffer&1)
 1c0:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <charlieBuffer>
 1c4:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <charlieBuffer+0x1>
 1c8:	80 ff       	sbrs	r24, 0
 1ca:	04 c0       	rjmp	.+8      	; 0x1d4 <__vector_6+0x40>
		charlie(charlieCOunt);
 1cc:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <charlieCOunt>
 1d0:	93 d0       	rcall	.+294    	; 0x2f8 <charlie>
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <__vector_6+0x44>
		else
		charlie(255);
 1d4:	8f ef       	ldi	r24, 0xFF	; 255
 1d6:	90 d0       	rcall	.+288    	; 0x2f8 <charlie>
		charlieCOunt++;
 1d8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <charlieCOunt>
 1dc:	8f 5f       	subi	r24, 0xFF	; 255
 1de:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <charlieCOunt>
		charlieBuffer = charlieBuffer>>1;
 1e2:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <charlieBuffer>
 1e6:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <charlieBuffer+0x1>
 1ea:	96 95       	lsr	r25
 1ec:	87 95       	ror	r24
 1ee:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <charlieBuffer+0x1>
 1f2:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <charlieBuffer>
		if (charlieCOunt>charlieCountMAX)
 1f6:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <charlieCOunt>
 1fa:	8c 30       	cpi	r24, 0x0C	; 12
 1fc:	70 f1       	brcs	.+92     	; 0x25a <__vector_6+0xc6>
		{
			subDiV++;
 1fe:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <subDiV>
 202:	8f 5f       	subi	r24, 0xFF	; 255
 204:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <subDiV>
			charlieCOunt=0;
 208:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <charlieCOunt>
			if (subDiV>subDivMAX)
 20c:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <subDiV>
 210:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <subDivMAX>
 214:	89 17       	cp	r24, r25
 216:	78 f4       	brcc	.+30     	; 0x236 <__vector_6+0xa2>
			{
				subDiV=0;
 218:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <subDiV>
				animationCounter++;
 21c:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <animationCounter>
 220:	8f 5f       	subi	r24, 0xFF	; 255
 222:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <animationCounter>
				if (animationCounter>=animationCOunterMAX)
 226:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <animationCounter>
 22a:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <animationCOunterMAX>
 22e:	98 17       	cp	r25, r24
 230:	10 f0       	brcs	.+4      	; 0x236 <__vector_6+0xa2>
				{
					animationCounter=0;
 232:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <animationCounter>
					
				}
			}
			charlieBuffer=animationData[animationCounter];
 236:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <animationCounter>
 23a:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <animationData>
 23e:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <animationData+0x1>
 242:	e2 2f       	mov	r30, r18
 244:	f9 2f       	mov	r31, r25
 246:	e8 0f       	add	r30, r24
 248:	f1 1d       	adc	r31, r1
 24a:	e8 0f       	add	r30, r24
 24c:	f1 1d       	adc	r31, r1
 24e:	85 91       	lpm	r24, Z+
 250:	95 91       	lpm	r25, Z+
 252:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <charlieBuffer+0x1>
 256:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <charlieBuffer>
		}
	}
	
	butDiv++;
 25a:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <butDiv>
 25e:	8f 5f       	subi	r24, 0xFF	; 255
 260:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <butDiv>
	if (butDiv>butDivMAX)
 264:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <butDiv>
 268:	86 30       	cpi	r24, 0x06	; 6
 26a:	80 f1       	brcs	.+96     	; 0x2cc <__vector_6+0x138>
	{
		butDiv=0;
 26c:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <butDiv>
		butState=(PINB & (1 << PB1));
 270:	86 b3       	in	r24, 0x16	; 22
 272:	82 70       	andi	r24, 0x02	; 2
 274:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <butState>
		if (butState==0)
 278:	81 11       	cpse	r24, r1
 27a:	09 c0       	rjmp	.+18     	; 0x28e <__vector_6+0xfa>
		{
			butDownCounter++;
 27c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <butDownCounter>
 280:	9f 5f       	subi	r25, 0xFF	; 255
			if (butDownCounter>254) butDownCounter=254;
 282:	9f 3f       	cpi	r25, 0xFF	; 255
 284:	f1 f4       	brne	.+60     	; 0x2c2 <__vector_6+0x12e>
 286:	9e ef       	ldi	r25, 0xFE	; 254
 288:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <butDownCounter>
 28c:	1c c0       	rjmp	.+56     	; 0x2c6 <__vector_6+0x132>
		}
		if ((~oldButState) & butState)
 28e:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <oldButState>
 292:	28 2f       	mov	r18, r24
 294:	30 e0       	ldi	r19, 0x00	; 0
 296:	50 e0       	ldi	r21, 0x00	; 0
 298:	40 95       	com	r20
 29a:	50 95       	com	r21
 29c:	24 23       	and	r18, r20
 29e:	35 23       	and	r19, r21
 2a0:	23 2b       	or	r18, r19
 2a2:	61 f0       	breq	.+24     	; 0x2bc <__vector_6+0x128>
		{
			if (butDownCounter>butDownCounterMAX) sleep_flag=1;
 2a4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <butDownCounter>
 2a8:	99 3c       	cpi	r25, 0xC9	; 201
 2aa:	18 f0       	brcs	.+6      	; 0x2b2 <__vector_6+0x11e>
 2ac:	91 e0       	ldi	r25, 0x01	; 1
 2ae:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__data_start>
			butEventFlag=1;
 2b2:	91 e0       	ldi	r25, 0x01	; 1
 2b4:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <__data_end>
			butDownCounter=0;
 2b8:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <butDownCounter>
		}
		oldButState=butState;
 2bc:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <oldButState>
 2c0:	05 c0       	rjmp	.+10     	; 0x2cc <__vector_6+0x138>
	{
		butDiv=0;
		butState=(PINB & (1 << PB1));
		if (butState==0)
		{
			butDownCounter++;
 2c2:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <butDownCounter>
			if (butDownCounter>254) butDownCounter=254;
		}
		if ((~oldButState) & butState)
 2c6:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <oldButState>
 2ca:	f8 cf       	rjmp	.-16     	; 0x2bc <__vector_6+0x128>
		}
		oldButState=butState;
		
	}
	
}
 2cc:	ff 91       	pop	r31
 2ce:	ef 91       	pop	r30
 2d0:	bf 91       	pop	r27
 2d2:	af 91       	pop	r26
 2d4:	9f 91       	pop	r25
 2d6:	8f 91       	pop	r24
 2d8:	7f 91       	pop	r23
 2da:	6f 91       	pop	r22
 2dc:	5f 91       	pop	r21
 2de:	4f 91       	pop	r20
 2e0:	3f 91       	pop	r19
 2e2:	2f 91       	pop	r18
 2e4:	0f 90       	pop	r0
 2e6:	0f be       	out	0x3f, r0	; 63
 2e8:	0f 90       	pop	r0
 2ea:	1f 90       	pop	r1
 2ec:	18 95       	reti

000002ee <leds_off>:
	
	
void leds_off()
{
	//DDRB &= ~(0b00011101);
	PORTB &= ~(0b00011101);
 2ee:	88 b3       	in	r24, 0x18	; 24
 2f0:	82 7e       	andi	r24, 0xE2	; 226
 2f2:	88 bb       	out	0x18, r24	; 24
	DDRB=0;
 2f4:	17 ba       	out	0x17, r1	; 23
 2f6:	08 95       	ret

000002f8 <charlie>:
	//PORTB=0;
}	

void charlie (byte var) 
{
 2f8:	cf 93       	push	r28
 2fa:	c8 2f       	mov	r28, r24
	//if (var>11) return;
	leds_off();
 2fc:	f8 df       	rcall	.-16     	; 0x2ee <leds_off>
	nop();
 2fe:	00 00       	nop
	//PORTB=0;
	if (var<12)
 300:	cc 30       	cpi	r28, 0x0C	; 12
 302:	90 f4       	brcc	.+36     	; 0x328 <charlie+0x30>
	{
		PORTB|=portMasks[var][1];
 304:	98 b3       	in	r25, 0x18	; 24
 306:	ec 2f       	mov	r30, r28
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	ee 0f       	add	r30, r30
 30c:	ff 1f       	adc	r31, r31
 30e:	af 01       	movw	r20, r30
 310:	4c 5a       	subi	r20, 0xAC	; 172
 312:	5f 4f       	sbci	r21, 0xFF	; 255
 314:	9a 01       	movw	r18, r20
 316:	2f 5f       	subi	r18, 0xFF	; 255
 318:	3f 4f       	sbci	r19, 0xFF	; 255
 31a:	f9 01       	movw	r30, r18
 31c:	84 91       	lpm	r24, Z
 31e:	89 2b       	or	r24, r25
 320:	88 bb       	out	0x18, r24	; 24
		DDRB=portMasks[var][0];
 322:	fa 01       	movw	r30, r20
 324:	84 91       	lpm	r24, Z
 326:	87 bb       	out	0x17, r24	; 23
	}
	nop();
 328:	00 00       	nop
}
 32a:	cf 91       	pop	r28
 32c:	08 95       	ret

0000032e <__vector_1>:
// prototypes
void shutdown_chip(void);
void blip(void);

// should have taken a switch, sleep stuff is huge
ISR(INT0_vect) {
 32e:	1f 92       	push	r1
 330:	0f 92       	push	r0
 332:	0f b6       	in	r0, 0x3f	; 63
 334:	0f 92       	push	r0
 336:	11 24       	eor	r1, r1
 338:	8f 93       	push	r24
	sleep_disable();
 33a:	85 b7       	in	r24, 0x35	; 53
 33c:	8f 7d       	andi	r24, 0xDF	; 223
 33e:	85 bf       	out	0x35, r24	; 53
	
	
	GIMSK &= ~(1 << INT0);
 340:	8b b7       	in	r24, 0x3b	; 59
 342:	8f 7b       	andi	r24, 0xBF	; 191
 344:	8b bf       	out	0x3b, r24	; 59
	GIMSK &= ~(1 << PCIE);
 346:	8b b7       	in	r24, 0x3b	; 59
 348:	8f 7d       	andi	r24, 0xDF	; 223
 34a:	8b bf       	out	0x3b, r24	; 59
	currentAnimation=0;
 34c:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <currentAnimation>
	
}
 350:	8f 91       	pop	r24
 352:	0f 90       	pop	r0
 354:	0f be       	out	0x3f, r0	; 63
 356:	0f 90       	pop	r0
 358:	1f 90       	pop	r1
 35a:	18 95       	reti

0000035c <shutdown_chip>:
}

void shutdown_chip()
{
	
	leds_off();
 35c:	c8 df       	rcall	.-112    	; 0x2ee <leds_off>

	/* Clear WDRF in MCUSR */
	MCUSR &= ~(1 << WDRF);
 35e:	84 b7       	in	r24, 0x34	; 52
 360:	87 7f       	andi	r24, 0xF7	; 247
 362:	84 bf       	out	0x34, r24	; 52
	/* Write logical one to WDCE and WDE */
	/* Keep old prescaler setting to prevent unintentional time-out */
	WDTCR |= (1 << WDCE) | (1 << WDE);
 364:	81 b5       	in	r24, 0x21	; 33
 366:	88 61       	ori	r24, 0x18	; 24
 368:	81 bd       	out	0x21, r24	; 33
	/* Turn off WDT */
	WDTCR = 0x00;
 36a:	11 bc       	out	0x21, r1	; 33

	ADCSRA &= ~(1 << ADEN); // turn off adc
 36c:	37 98       	cbi	0x06, 7	; 6

	GIMSK |= (1 << INT0);
 36e:	8b b7       	in	r24, 0x3b	; 59
 370:	80 64       	ori	r24, 0x40	; 64
 372:	8b bf       	out	0x3b, r24	; 59
	GIMSK |= (1 << PCIE);
 374:	8b b7       	in	r24, 0x3b	; 59
 376:	80 62       	ori	r24, 0x20	; 32
 378:	8b bf       	out	0x3b, r24	; 59

	set_sleep_mode(SLEEP_MODE_PWR_DOWN);
 37a:	85 b7       	in	r24, 0x35	; 53
 37c:	87 7e       	andi	r24, 0xE7	; 231
 37e:	80 61       	ori	r24, 0x10	; 16
 380:	85 bf       	out	0x35, r24	; 53
	sleep_enable();
 382:	85 b7       	in	r24, 0x35	; 53
 384:	80 62       	ori	r24, 0x20	; 32
 386:	85 bf       	out	0x35, r24	; 53
	sei(); // Enable global interrupts
 388:	78 94       	sei
	sleep_cpu();
 38a:	88 95       	sleep
	sleep_disable();
 38c:	85 b7       	in	r24, 0x35	; 53
 38e:	8f 7d       	andi	r24, 0xDF	; 223
 390:	85 bf       	out	0x35, r24	; 53
 392:	08 95       	ret

00000394 <main>:

int main(void)
{
	
    // this is for the button setup
    PORTB |= (1 << PB1);
 394:	c1 9a       	sbi	0x18, 1	; 24
    DDRB &= ~(1 << PB1);
 396:	b9 98       	cbi	0x17, 1	; 23
	
	animation_init();
 398:	83 de       	rcall	.-762    	; 0xa0 <animation_init>
	animation_select(currentAnimation);
 39a:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <currentAnimation>
 39e:	9e de       	rcall	.-708    	; 0xdc <animation_select>
	sei();
 3a0:	78 94       	sei
	while(1)
	{
		if (sleep_flag)
 3a2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 3a6:	88 23       	and	r24, r24
 3a8:	19 f0       	breq	.+6      	; 0x3b0 <main+0x1c>
		{
			sleep_flag=0;
 3aa:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
			shutdown_chip();
 3ae:	d6 df       	rcall	.-84     	; 0x35c <shutdown_chip>
		}
		if (isButFlag())
 3b0:	ec de       	rcall	.-552    	; 0x18a <isButFlag>
 3b2:	88 23       	and	r24, r24
 3b4:	b1 f3       	breq	.-20     	; 0x3a2 <main+0xe>
		{
			currentAnimation++;
 3b6:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <currentAnimation>
 3ba:	8f 5f       	subi	r24, 0xFF	; 255
			if (currentAnimation>7) currentAnimation=0;
 3bc:	88 30       	cpi	r24, 0x08	; 8
 3be:	18 f4       	brcc	.+6      	; 0x3c6 <main+0x32>
			sleep_flag=0;
			shutdown_chip();
		}
		if (isButFlag())
		{
			currentAnimation++;
 3c0:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <currentAnimation>
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <main+0x36>
			if (currentAnimation>7) currentAnimation=0;
 3c6:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <currentAnimation>
			animation_select(currentAnimation);
 3ca:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <currentAnimation>
 3ce:	86 de       	rcall	.-756    	; 0xdc <animation_select>
 3d0:	e8 cf       	rjmp	.-48     	; 0x3a2 <main+0xe>

000003d2 <_exit>:
 3d2:	f8 94       	cli

000003d4 <__stop_program>:
 3d4:	ff cf       	rjmp	.-2      	; 0x3d4 <__stop_program>
